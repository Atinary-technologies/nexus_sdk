# coding: utf-8

"""
    Atinary™ Nexus

    As part of Atinary™ Nexus, we offer a downloadable software development kit (SDK) client, which facilitates the access to the application programming interface (API) entry point. This API allows users to manage their project subscriptions and to share files among collaborators involved in the same project(s). The api usage requires an `API KEY`, associated to your Atinary™ Nexus account. You can generate your `API KEY` on your [account information page](https://home.atinary.com/user).  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: support@atinary.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from nexus_sdk.api_client import ApiClient
from nexus_sdk.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class FilesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_file(self, file_id, **kwargs):  # noqa: E501
        """Delete a file  # noqa: E501

        Delete a specific file.  Note that every file belongs to a project and only users subscribed to that project are authorized to request deletions on it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_file(file_id, async_req=True)
        >>> result = thread.get()

        :param file_id: ID assigned to the file once it is uploaded. (required)
        :type file_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GenericResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_file_with_http_info(file_id, **kwargs)  # noqa: E501

    def delete_file_with_http_info(self, file_id, **kwargs):  # noqa: E501
        """Delete a file  # noqa: E501

        Delete a specific file.  Note that every file belongs to a project and only users subscribed to that project are authorized to request deletions on it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_file_with_http_info(file_id, async_req=True)
        >>> result = thread.get()

        :param file_id: ID assigned to the file once it is uploaded. (required)
        :type file_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GenericResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'file_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_file" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'file_id' is set
        if self.api_client.client_side_validation and local_var_params.get('file_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `file_id` when calling `delete_file`")  # noqa: E501

        if self.api_client.client_side_validation and ('file_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['file_id']) > 36):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `file_id` when calling `delete_file`, length must be less than or equal to `36`")  # noqa: E501
        if self.api_client.client_side_validation and ('file_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['file_id']) < 36):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `file_id` when calling `delete_file`, length must be greater than or equal to `36`")  # noqa: E501
        if self.api_client.client_side_validation and 'file_id' in local_var_params and not re.search(r'^fle_[0-9a-f]{32}$', local_var_params['file_id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `file_id` when calling `delete_file`, must conform to the pattern `/^fle_[0-9a-f]{32}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'file_id' in local_var_params:
            path_params['file_id'] = local_var_params['file_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'tokens']  # noqa: E501

        response_types_map = {
            200: "GenericResponse",
            401: "GenericResponse",
            403: "GenericResponse",
        }

        return self.api_client.call_api(
            '/Files/{file_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def delete_files(self, **kwargs):  # noqa: E501
        """delete_files  # noqa: E501

        Delete several files in a project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_files(async_req=True)
        >>> result = thread.get()

        :param project_id: **Required** ID assigned to the project once created in Atinary™ Nexus.
        :type project_id: str
        :param delete_files_req: Json object specifying the **name**.
        :type delete_files_req: DeleteFilesReq
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GenericResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_files_with_http_info(**kwargs)  # noqa: E501

    def delete_files_with_http_info(self, **kwargs):  # noqa: E501
        """delete_files  # noqa: E501

        Delete several files in a project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_files_with_http_info(async_req=True)
        >>> result = thread.get()

        :param project_id: **Required** ID assigned to the project once created in Atinary™ Nexus.
        :type project_id: str
        :param delete_files_req: Json object specifying the **name**.
        :type delete_files_req: DeleteFilesReq
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GenericResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'project_id',
            'delete_files_req'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_files" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if self.api_client.client_side_validation and ('project_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['project_id']) > 36):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project_id` when calling `delete_files`, length must be less than or equal to `36`")  # noqa: E501
        if self.api_client.client_side_validation and ('project_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['project_id']) < 36):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project_id` when calling `delete_files`, length must be greater than or equal to `36`")  # noqa: E501
        if self.api_client.client_side_validation and 'project_id' in local_var_params and not re.search(r'^prj_[0-9a-f]{32}$', local_var_params['project_id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project_id` when calling `delete_files`, must conform to the pattern `/^prj_[0-9a-f]{32}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'project_id' in local_var_params:
            header_params['project-id'] = local_var_params['project_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_files_req' in local_var_params:
            body_params = local_var_params['delete_files_req']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['api_key', 'tokens']  # noqa: E501

        response_types_map = {
            200: "GenericResponse",
            401: "GenericResponse",
            403: "GenericResponse",
        }

        return self.api_client.call_api(
            '/Files/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def download_file(self, file_id, **kwargs):  # noqa: E501
        """Download a file  # noqa: E501

        Download a specific file. Note that every file belongs to a project and only users subscribed to the project are authorized to request downloads from it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_file(file_id, async_req=True)
        >>> result = thread.get()

        :param file_id: ID assigned to the file once it is uploaded. (required)
        :type file_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: file
        """
        kwargs['_return_http_data_only'] = True
        return self.download_file_with_http_info(file_id, **kwargs)  # noqa: E501

    def download_file_with_http_info(self, file_id, **kwargs):  # noqa: E501
        """Download a file  # noqa: E501

        Download a specific file. Note that every file belongs to a project and only users subscribed to the project are authorized to request downloads from it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_file_with_http_info(file_id, async_req=True)
        >>> result = thread.get()

        :param file_id: ID assigned to the file once it is uploaded. (required)
        :type file_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(file, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'file_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_file" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'file_id' is set
        if self.api_client.client_side_validation and local_var_params.get('file_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `file_id` when calling `download_file`")  # noqa: E501

        if self.api_client.client_side_validation and ('file_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['file_id']) > 36):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `file_id` when calling `download_file`, length must be less than or equal to `36`")  # noqa: E501
        if self.api_client.client_side_validation and ('file_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['file_id']) < 36):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `file_id` when calling `download_file`, length must be greater than or equal to `36`")  # noqa: E501
        if self.api_client.client_side_validation and 'file_id' in local_var_params and not re.search(r'^fle_[0-9a-f]{32}$', local_var_params['file_id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `file_id` when calling `download_file`, must conform to the pattern `/^fle_[0-9a-f]{32}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'file_id' in local_var_params:
            path_params['file_id'] = local_var_params['file_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'tokens']  # noqa: E501

        response_types_map = {
            200: "file",
            401: "GenericResponse",
            403: "GenericResponse",
        }

        return self.api_client.call_api(
            '/Files/{file_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def list_files(self, **kwargs):  # noqa: E501
        """List available files for a project  # noqa: E501

        List available files for a specific project. Note that only users subscribed to the project can list its files.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_files(async_req=True)
        >>> result = thread.get()

        :param project_id: **Required** ID assigned to the project once created in Atinary™ Nexus.
        :type project_id: str
        :param group_type: String indicating how the file is classified. Available values are *parameters*, *properties* or *other*.
        :type group_type: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListFilesResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.list_files_with_http_info(**kwargs)  # noqa: E501

    def list_files_with_http_info(self, **kwargs):  # noqa: E501
        """List available files for a project  # noqa: E501

        List available files for a specific project. Note that only users subscribed to the project can list its files.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_files_with_http_info(async_req=True)
        >>> result = thread.get()

        :param project_id: **Required** ID assigned to the project once created in Atinary™ Nexus.
        :type project_id: str
        :param group_type: String indicating how the file is classified. Available values are *parameters*, *properties* or *other*.
        :type group_type: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListFilesResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'project_id',
            'group_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_files" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if self.api_client.client_side_validation and ('project_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['project_id']) > 36):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project_id` when calling `list_files`, length must be less than or equal to `36`")  # noqa: E501
        if self.api_client.client_side_validation and ('project_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['project_id']) < 36):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project_id` when calling `list_files`, length must be greater than or equal to `36`")  # noqa: E501
        if self.api_client.client_side_validation and 'project_id' in local_var_params and not re.search(r'^prj_[0-9a-f]{32}$', local_var_params['project_id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project_id` when calling `list_files`, must conform to the pattern `/^prj_[0-9a-f]{32}$/`")  # noqa: E501
        if self.api_client.client_side_validation and ('group_type' in local_var_params and  # noqa: E501
                                                        len(local_var_params['group_type']) > 50):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `group_type` when calling `list_files`, length must be less than or equal to `50`")  # noqa: E501
        if self.api_client.client_side_validation and 'group_type' in local_var_params and not re.search(r'(parameters|properties|other)', local_var_params['group_type']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `group_type` when calling `list_files`, must conform to the pattern `/(parameters|properties|other)/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'project_id' in local_var_params:
            header_params['project-id'] = local_var_params['project_id']  # noqa: E501
        if 'group_type' in local_var_params:
            header_params['group-type'] = local_var_params['group_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'tokens']  # noqa: E501

        response_types_map = {
            200: "ListFilesResponse",
            401: "GenericResponse",
            403: "GenericResponse",
        }

        return self.api_client.call_api(
            '/Files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def upload_file(self, project_id, group_type, file, **kwargs):  # noqa: E501
        """Upload a file under a project  # noqa: E501

        Upload a file under a specific project. Note that only users subscribed to the project can upload files to it.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upload_file(project_id, group_type, file, async_req=True)
        >>> result = thread.get()

        :param project_id: ID assigned to the project once created in Atinary™ Nexus. (required)
        :type project_id: str
        :param group_type: String indicating how the file is classified. Available values are *parameters*, *properties* or *other*. (required)
        :type group_type: str
        :param file: (required)
        :type file: file
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: UploadResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.upload_file_with_http_info(project_id, group_type, file, **kwargs)  # noqa: E501

    def upload_file_with_http_info(self, project_id, group_type, file, **kwargs):  # noqa: E501
        """Upload a file under a project  # noqa: E501

        Upload a file under a specific project. Note that only users subscribed to the project can upload files to it.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upload_file_with_http_info(project_id, group_type, file, async_req=True)
        >>> result = thread.get()

        :param project_id: ID assigned to the project once created in Atinary™ Nexus. (required)
        :type project_id: str
        :param group_type: String indicating how the file is classified. Available values are *parameters*, *properties* or *other*. (required)
        :type group_type: str
        :param file: (required)
        :type file: file
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(UploadResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'project_id',
            'group_type',
            'file'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_file" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and local_var_params.get('project_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `project_id` when calling `upload_file`")  # noqa: E501
        # verify the required parameter 'group_type' is set
        if self.api_client.client_side_validation and local_var_params.get('group_type') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `group_type` when calling `upload_file`")  # noqa: E501
        # verify the required parameter 'file' is set
        if self.api_client.client_side_validation and local_var_params.get('file') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `file` when calling `upload_file`")  # noqa: E501

        if self.api_client.client_side_validation and ('project_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['project_id']) > 36):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project_id` when calling `upload_file`, length must be less than or equal to `36`")  # noqa: E501
        if self.api_client.client_side_validation and ('project_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['project_id']) < 36):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project_id` when calling `upload_file`, length must be greater than or equal to `36`")  # noqa: E501
        if self.api_client.client_side_validation and 'project_id' in local_var_params and not re.search(r'^prj_[0-9a-f]{32}$', local_var_params['project_id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project_id` when calling `upload_file`, must conform to the pattern `/^prj_[0-9a-f]{32}$/`")  # noqa: E501
        if self.api_client.client_side_validation and ('group_type' in local_var_params and  # noqa: E501
                                                        len(local_var_params['group_type']) > 50):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `group_type` when calling `upload_file`, length must be less than or equal to `50`")  # noqa: E501
        if self.api_client.client_side_validation and 'group_type' in local_var_params and not re.search(r'(parameters|properties|other)', local_var_params['group_type']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `group_type` when calling `upload_file`, must conform to the pattern `/(parameters|properties|other)/`")  # noqa: E501
        if self.api_client.client_side_validation and ('file' in local_var_params and  # noqa: E501
                                                        len(local_var_params['file']) > 536870912):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `file` when calling `upload_file`, length must be less than or equal to `536870912`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('project_id') is not None:  # noqa: E501
            query_params.append(('project_id', local_var_params['project_id']))  # noqa: E501
        if local_var_params.get('group_type') is not None:  # noqa: E501
            query_params.append(('group_type', local_var_params['group_type']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['multipart/form-data'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['api_key', 'tokens']  # noqa: E501

        response_types_map = {
            200: "UploadResponse",
            401: "GenericResponse",
            403: "GenericResponse",
        }

        return self.api_client.call_api(
            '/Files', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

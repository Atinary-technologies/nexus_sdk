# coding: utf-8

"""
    Atinary™ Nexus

    As part of Atinary™ Nexus, we offer a downloadable software development kit (SDK) client, which facilitates the access to the application programming interface (API) entry point. This API allows users to manage their project subscriptions and to share files among collaborators involved in the same project(s). The api usage requires an `API KEY`, associated to your Atinary™ Nexus account. You can generate your `API KEY` on your [account information page](https://home.atinary.com/user).  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: support@atinary.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from nexus_sdk.configuration import Configuration


class AvailableProject(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'owner': 'str',
        'files': 'AvailableFilesSummary',
        'group_id': 'str',
        'description': 'str',
        'creation_date': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'owner': 'owner',
        'files': 'files',
        'group_id': 'group_id',
        'description': 'description',
        'creation_date': 'creation_date'
    }

    def __init__(self, id=None, name=None, owner=None, files=None, group_id=None, description='', creation_date=None, local_vars_configuration=None):  # noqa: E501
        """AvailableProject - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._owner = None
        self._files = None
        self._group_id = None
        self._description = None
        self._creation_date = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.owner = owner
        self.files = files
        if group_id is not None:
            self.group_id = group_id
        if description is not None:
            self.description = description
        self.creation_date = creation_date

    @property
    def id(self):
        """Gets the id of this AvailableProject.  # noqa: E501

        ID assigned to the project once created in Atinary™ Nexus  # noqa: E501

        :return: The id of this AvailableProject.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AvailableProject.

        ID assigned to the project once created in Atinary™ Nexus  # noqa: E501

        :param id: The id of this AvailableProject.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id is not None and len(id) > 36):
            raise ValueError("Invalid value for `id`, length must be less than or equal to `36`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id is not None and len(id) < 36):
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `36`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id is not None and not re.search(r'^prj_[0-9a-f]{32}$', id)):  # noqa: E501
            raise ValueError(r"Invalid value for `id`, must be a follow pattern or equal to `/^prj_[0-9a-f]{32}$/`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this AvailableProject.  # noqa: E501

        Name assigned to the project  # noqa: E501

        :return: The name of this AvailableProject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AvailableProject.

        Name assigned to the project  # noqa: E501

        :param name: The name of this AvailableProject.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 50):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and not re.search(r'^[ -~]+$', name)):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^[ -~]+$/`")  # noqa: E501

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this AvailableProject.  # noqa: E501

        User email  # noqa: E501

        :return: The owner of this AvailableProject.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this AvailableProject.

        User email  # noqa: E501

        :param owner: The owner of this AvailableProject.  # noqa: E501
        :type owner: str
        """
        if self.local_vars_configuration.client_side_validation and owner is None:  # noqa: E501
            raise ValueError("Invalid value for `owner`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                owner is not None and len(owner) > 254):
            raise ValueError("Invalid value for `owner`, length must be less than or equal to `254`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                owner is not None and len(owner) < 4):
            raise ValueError("Invalid value for `owner`, length must be greater than or equal to `4`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                owner is not None and not re.search(r'^(?=[a-zA-Z0-9][a-zA-Z0-9@._%+-]{5,253}$)[a-zA-Z0-9._%+-]{1,64}@(?:(?=[a-zA-Z0-9-]{1,63}\.)[a-zA-Z0-9]+(?:-[a-zA-Z0-9]+)*\.){1,8}[a-zA-Z]{2,63}$', owner)):  # noqa: E501
            raise ValueError(r"Invalid value for `owner`, must be a follow pattern or equal to `/^(?=[a-zA-Z0-9][a-zA-Z0-9@._%+-]{5,253}$)[a-zA-Z0-9._%+-]{1,64}@(?:(?=[a-zA-Z0-9-]{1,63}\.)[a-zA-Z0-9]+(?:-[a-zA-Z0-9]+)*\.){1,8}[a-zA-Z]{2,63}$/`")  # noqa: E501

        self._owner = owner

    @property
    def files(self):
        """Gets the files of this AvailableProject.  # noqa: E501


        :return: The files of this AvailableProject.  # noqa: E501
        :rtype: AvailableFilesSummary
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this AvailableProject.


        :param files: The files of this AvailableProject.  # noqa: E501
        :type files: AvailableFilesSummary
        """
        if self.local_vars_configuration.client_side_validation and files is None:  # noqa: E501
            raise ValueError("Invalid value for `files`, must not be `None`")  # noqa: E501

        self._files = files

    @property
    def group_id(self):
        """Gets the group_id of this AvailableProject.  # noqa: E501

        Group identifier (group name in this case)  # noqa: E501

        :return: The group_id of this AvailableProject.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this AvailableProject.

        Group identifier (group name in this case)  # noqa: E501

        :param group_id: The group_id of this AvailableProject.  # noqa: E501
        :type group_id: str
        """
        if (self.local_vars_configuration.client_side_validation and
                group_id is not None and len(group_id) > 128):
            raise ValueError("Invalid value for `group_id`, length must be less than or equal to `128`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                group_id is not None and len(group_id) < 1):
            raise ValueError("Invalid value for `group_id`, length must be greater than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                group_id is not None and not re.search(r'^\S*$', group_id)):  # noqa: E501
            raise ValueError(r"Invalid value for `group_id`, must be a follow pattern or equal to `/^\S*$/`")  # noqa: E501

        self._group_id = group_id

    @property
    def description(self):
        """Gets the description of this AvailableProject.  # noqa: E501

        Description of the project.  # noqa: E501

        :return: The description of this AvailableProject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AvailableProject.

        Description of the project.  # noqa: E501

        :param description: The description of this AvailableProject.  # noqa: E501
        :type description: str
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) > 255):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                description is not None and not re.search(r'^[ -~]*$', description)):  # noqa: E501
            raise ValueError(r"Invalid value for `description`, must be a follow pattern or equal to `/^[ -~]*$/`")  # noqa: E501

        self._description = description

    @property
    def creation_date(self):
        """Gets the creation_date of this AvailableProject.  # noqa: E501

        Following RFC3339 format, this is a string representing an ISO8601 Date-time  # noqa: E501

        :return: The creation_date of this AvailableProject.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this AvailableProject.

        Following RFC3339 format, this is a string representing an ISO8601 Date-time  # noqa: E501

        :param creation_date: The creation_date of this AvailableProject.  # noqa: E501
        :type creation_date: datetime
        """
        if self.local_vars_configuration.client_side_validation and creation_date is None:  # noqa: E501
            raise ValueError("Invalid value for `creation_date`, must not be `None`")  # noqa: E501

        self._creation_date = creation_date

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AvailableProject):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AvailableProject):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    ChemOS™ Web Portal

    As part of the ChemOS™ Web Portal, we offer a downloadable software development kit (SDK) client, which facilitates the access to the application programming interface (API) entry point. This API allows users to manage their project subscriptions and to share files among collaborators involved in the same project(s). The api usage requires an `API KEY`, associated to your Web Portal account. You can generate your `API KEY` on your [account information page](https://scientia.chemos.io/user).  # noqa: E501

    The version of the OpenAPI document: beta
    Contact: support@chemos.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class AvailableFilesSummary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'parameters': 'int',
        'properties': 'int',
        'other': 'int'
    }

    attribute_map = {
        'parameters': 'parameters',
        'properties': 'properties',
        'other': 'other'
    }

    def __init__(self, parameters=None, properties=None, other=None, local_vars_configuration=None):  # noqa: E501
        """AvailableFilesSummary - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._parameters = None
        self._properties = None
        self._other = None
        self.discriminator = None

        self.parameters = parameters
        self.properties = properties
        self.other = other

    @property
    def parameters(self):
        """Gets the parameters of this AvailableFilesSummary.  # noqa: E501


        :return: The parameters of this AvailableFilesSummary.  # noqa: E501
        :rtype: int
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this AvailableFilesSummary.


        :param parameters: The parameters of this AvailableFilesSummary.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and parameters is None:  # noqa: E501
            raise ValueError("Invalid value for `parameters`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                parameters is not None and parameters > 1000):  # noqa: E501
            raise ValueError("Invalid value for `parameters`, must be a value less than or equal to `1000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                parameters is not None and parameters < 0):  # noqa: E501
            raise ValueError("Invalid value for `parameters`, must be a value greater than or equal to `0`")  # noqa: E501

        self._parameters = parameters

    @property
    def properties(self):
        """Gets the properties of this AvailableFilesSummary.  # noqa: E501


        :return: The properties of this AvailableFilesSummary.  # noqa: E501
        :rtype: int
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this AvailableFilesSummary.


        :param properties: The properties of this AvailableFilesSummary.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and properties is None:  # noqa: E501
            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                properties is not None and properties > 1000):  # noqa: E501
            raise ValueError("Invalid value for `properties`, must be a value less than or equal to `1000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                properties is not None and properties < 0):  # noqa: E501
            raise ValueError("Invalid value for `properties`, must be a value greater than or equal to `0`")  # noqa: E501

        self._properties = properties

    @property
    def other(self):
        """Gets the other of this AvailableFilesSummary.  # noqa: E501


        :return: The other of this AvailableFilesSummary.  # noqa: E501
        :rtype: int
        """
        return self._other

    @other.setter
    def other(self, other):
        """Sets the other of this AvailableFilesSummary.


        :param other: The other of this AvailableFilesSummary.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and other is None:  # noqa: E501
            raise ValueError("Invalid value for `other`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                other is not None and other > 1000):  # noqa: E501
            raise ValueError("Invalid value for `other`, must be a value less than or equal to `1000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                other is not None and other < 0):  # noqa: E501
            raise ValueError("Invalid value for `other`, must be a value greater than or equal to `0`")  # noqa: E501

        self._other = other

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AvailableFilesSummary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AvailableFilesSummary):
            return True

        return self.to_dict() != other.to_dict()
